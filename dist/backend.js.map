{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/status.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/config/middleware/status.js","webpack://backend/./backend/src/config/middleware/adapter/status.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/status.js","webpack://backend/./backend/src/controller/test.js","webpack://backend/external \"require3\""],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;AClFA,iBAAiB,mBAAO,CAAC,CAAe;AACxC,eAAe,mBAAO,CAAC,CAAoB;AAC3C,gBAAgB,mBAAO,CAAC,CAAqB;AAC7C,eAAe,mBAAO,CAAC,CAAoB;AAC3C,oBAAoB,mBAAO,CAAC,CAAyB;;AAErD;AACA;;AAEA,iBAAiB,mBAAO,CAAC,EAAa;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpBA,gBAAgB,mBAAO,CAAC,CAAsB;AAC9C,eAAe,mBAAO,CAAC,CAAqB;;AAE5C;AACA;AACA;AACA;;;;;;;ACNA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC3BA;;AAEA;;AAEA,eAAe,sBAAsB;AACrC,kEAAkE,4BAA4B;AAC9F;AACA;;AAEA;;AAEA;AACA;;;;;;;ACZA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;;;;;ACpBA;AACA,WAAW,mBAAO,CAAC,CAAmB;AACtC;;;;;;;ACFA;AACA;;;;;;;ACDA;AACA;AACA;;;;;;;ACFA,eAAe,mBAAO,CAAC,CAAwB;;AAE/C;AACA;AACA;;;;;;;ACJA,iBAAiB,mBAAO,CAAC,EAAqB;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;;;;;;;AClBA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,uBAAuB,2BAA2B;AAClD;;AAEA,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC/DA,gBAAgB,mBAAO,CAAC,EAAyB;AACjD,eAAe,mBAAO,CAAC,EAAwB;AAC/C,aAAa,mBAAO,CAAC,EAAsB;;AAE3C;AACA;AACA,KAAK,oFAAoF;AACzF,KAAK;AACL,aAAa,QAAQ,gBAAgB,EAAE;AACvC,KAAK;AACL;AACA;AACA;AACA,OAAO,mFAAmF,QAAQ,gBAAgB,EAAE,EAAE;AACtH;AACA;AACA;AACA;;;;;;;ACjBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACVA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACZA,iBAAiB,mBAAO,CAAC,EAAU;AACnC;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;ACpCA,qC","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const services = require('./services.js');\nconst config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n\n  const routes = require('./routes.js')(app);\n\n  return {\n    routes,\n    services,\n    config,\n    locales,\n    errors,\n    middlewares,\n  };\n\n};\n","const version = require('./service/version.js');\nconst status = require('./service/status.js');\n\nmodule.exports = {\n  version,\n  status,\n};\n","module.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aStatus\n        const sql = `\n          CREATE TABLE aStatus (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            module varchar(255) DEFAULT NULL,\n            name varchar(255) DEFAULT NULL,\n            value json DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n      }\n    }\n\n  }\n\n  return Version;\n};\n","module.exports = app => {\n\n  class Status extends app.Service {\n\n    async set({ module, name, value }) {\n      const res = await this.ctx.meta.status.module(module)._set({ name, value, queue: false });\n      return res;\n    }\n\n  }\n\n  return Status;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // middlewares\n  config.middlewares = {\n    status: {\n      global: true,\n      dependencies: 'instance',\n    },\n  };\n\n  // queues\n  config.queues = {\n    statusSet: {\n      path: 'status/set',\n    },\n  };\n\n  return config;\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n};\n","// error code should start from 1001\nmodule.exports = {\n};\n","const status = require('./middleware/status.js');\n\nmodule.exports = {\n  status,\n};\n","const StatusFn = require('./adapter/status.js');\nconst STATUS = Symbol('CTX#__STATUS');\n\nmodule.exports = () => {\n  return async function status(ctx, next) {\n    ctx.meta = ctx.meta || {};\n    Object.defineProperty(ctx.meta, 'status', {\n      get() {\n        if (ctx.meta[STATUS] === undefined) {\n          ctx.meta[STATUS] = new (StatusFn(ctx))();\n        }\n        return ctx.meta[STATUS];\n      },\n    });\n\n    // next\n    await next();\n  };\n};\n","const Fn = module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Status {\n\n    constructor(moduleName) {\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    // other module's status\n    module(moduleName) {\n      return new (Fn(ctx))(moduleName);\n    }\n\n    async get(name) {\n      const status = await ctx.db.get('aStatus', {\n        iid: ctx.instance.id,\n        module: this.moduleName,\n        name,\n      });\n      return status ? JSON.parse(status.value) : undefined;\n    }\n\n    async set(name, value) {\n      await this._set({ name, value, queue: true });\n    }\n\n    async _set({ name, value, queue }) {\n      const status = await ctx.db.get('aStatus', {\n        iid: ctx.instance.id,\n        module: this.moduleName,\n        name,\n      });\n      if (status) {\n        await ctx.db.update('aStatus', {\n          id: status.id,\n          value: JSON.stringify(value),\n        });\n      } else {\n        if (queue) {\n          await ctx.app.meta.queue.pushAsync({\n            subdomain: ctx.subdomain,\n            module: moduleInfo.relativeName,\n            queueName: 'statusSet',\n            data: {\n              module: this.moduleName,\n              name,\n              value,\n            },\n          });\n        } else {\n          await ctx.db.insert('aStatus', {\n            iid: ctx.instance.id,\n            module: this.moduleName,\n            name,\n            value: JSON.stringify(value),\n          });\n        }\n      }\n    }\n\n  }\n\n  return Status;\n};\n","const version = require('./controller/version.js');\nconst status = require('./controller/status.js');\nconst test = require('./controller/test.js');\n\nmodule.exports = app => {\n  let routes = [\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'status/set', controller: status, middlewares: 'inner',\n      meta: { auth: { enable: false } },\n    },\n  ];\n  if (app.meta.isTest || app.meta.isLocal) {\n    routes = routes.concat([\n      { method: 'get', path: 'test/status', controller: test, middlewares: 'test', meta: { auth: { enable: false } } },\n    ]);\n  }\n  return routes;\n};\n","module.exports = app => {\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n","module.exports = app => {\n\n  class StatusController extends app.Controller {\n\n    async set() {\n      const res = await this.ctx.service.status.set(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n  }\n\n  return StatusController;\n};\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n  class TestController extends app.Controller {\n\n    async status() {\n\n      // get\n      let value = await this.ctx.meta.status.get('__enable');\n      assert(value === undefined);\n\n      // set\n      await this.ctx.meta.status.set('__enable', true);\n\n      // get\n      value = await this.ctx.meta.status.get('__enable');\n      assert(value === true);\n\n      // other module's status\n      const moduleStatus = this.ctx.meta.status.module(this.ctx.module.info.relativeName);\n      value = await moduleStatus.get('__enable');\n      assert(value === true);\n\n      // set\n      await this.ctx.meta.status.set('__enable', false);\n\n      // get\n      value = await this.ctx.meta.status.get('__enable');\n      assert(value === false);\n\n      this.ctx.success();\n    }\n\n  }\n  return TestController;\n};\n\n","module.exports = require(\"require3\");"],"sourceRoot":""}